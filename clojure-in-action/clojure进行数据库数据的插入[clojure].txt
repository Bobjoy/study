(def table-fields ;所有可能的表字段的集合，用来过滤httprequest中的非数据存储字段。
  (set
	(concat
    #{"audit" "public","_tableschemaid"}
		(reduce (fn [ss num] (conj ss (str "s" num))) #{} (range 20))
		(reduce (fn [is num] (conj is (str "i" num))) #{} (range 10))
		(reduce (fn [dos num] (conj dos (str "do" num))) #{} (range 10))
		(reduce (fn [bs num] (conj bs (str "b" num))) #{} (range 10))
		(reduce (fn [das num] (conj das (str "da" num))) #{} (range 10))
		(reduce (fn [dts num] (conj dts (str "dt" num))) #{} (range 5))
		(reduce (fn [ts num] (conj ts (str "t" num))) #{} (range 5))
		(reduce (fn [lts num] (conj lts (str "lt" num))) #{} (range 2))
	)))

(defn create-record-map-from-req
  "生成记录hashmap"
   [http-req]
	(reduce (fn [hm pair]
           (let [[k v] [(first pair) (first (nth pair 1))]]
             (if (or (= "audit" k) (= "public" k)) (if v (assoc hm k 1)) (assoc hm k v))
           )) {};重新组合成hashmap,
         (filter (fn [item] (table-fields (key item))) (into {} (.getParameterMap http-req)));从map里面找出属于数据库字段的内容。结果集不再是hashmap，而是seq。(["pn1",["v1" "v2"]] ["pn2",["v3" "v4"]])
	))

(defn insert-one-record 
  "插入"
  [http-req fieldset]
  (read-one-record fieldset
  (val
  (first
  (sql/with-connection (db-connection)
  (sql/insert-record
    :FREETABLE
    (create-record-map-from-req http-req)))))))